/*
 * Direitos reservados a Ramon Lacava Gutierrez Gon√ßales
 * ramonrune@gmail.com
 */
package com.healthsystem.errorlog;

import com.healthsystem.healthinstitution.HealthInstitutionModel;
import com.healthsystem.util.ResizeUtil;
import com.healthsystem.util.WEBAPI;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class ErrorLogPanel extends javax.swing.JPanel {

    private java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/healthsystem/errorlog/Bundle"); // NOI18N

    /**
     * Creates new form ErrorLogPanel
     */
    public ErrorLogPanel() {
        initComponents();

        errorLogTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            protected void setValue(Object value) {
                if (value instanceof ImageIcon) {
                    setIcon((ImageIcon) value);
                    setText("");
                } else {
                    setIcon(null);
                    super.setValue(value);
                }
            }
        });

        dateDatePicker.setDate(new Date());

        chargeLog();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        errorLogTable = new javax.swing.JTable();
        dateDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        errorLogTable.setModel(new javax.swing.table.DefaultTableModel(

            new Object [][] {

            },
            new String [] {
                bundle.getString("ErrorLogPanel.table.column0"),
                bundle.getString("ErrorLogPanel.table.column1"),
                bundle.getString("ErrorLogPanel.table.column2"),
                bundle.getString("ErrorLogPanel.table.column3"),
                bundle.getString("ErrorLogPanel.table.column4"),
                bundle.getString("ErrorLogPanel.table.column5"),
                bundle.getString("ErrorLogPanel.table.column6"),
                bundle.getString("ErrorLogPanel.table.column7"),
                bundle.getString("ErrorLogPanel.table.column8")
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(errorLogTable);

        dateDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateDatePickerActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/healthsystem/errorlog/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("ErrorLogPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dateDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateDatePickerActionPerformed
        chargeLog();
    }//GEN-LAST:event_dateDatePickerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker dateDatePicker;
    private javax.swing.JTable errorLogTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private ErrorLogDAO errorLogDAO = new ErrorLogDAO();

    private void chargeLog() {
        for (int i = 0; i <= errorLogTable.getRowCount(); i++) {
            ((DefaultTableModel) errorLogTable.getModel()).setNumRows(0);
        }
        errorLogTable.updateUI();

        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        List<ErrorLogModel> errors = errorLogDAO.getErrors(df.format(dateDatePicker.getDate()));
        DefaultTableModel model = (DefaultTableModel) errorLogTable.getModel();
        for (ErrorLogModel errorLogModel : errors) {

            try {
                URL url = new URL(WEBAPI.IMAGE + "userhealth/" + errorLogModel.getPhoto() + "?" + System.currentTimeMillis());

                System.out.println(url.toString());
                BufferedImage buff = ImageIO.read(url);
                BufferedImage resize = ResizeUtil.resize(buff, 40, 40);
                resize = ResizeUtil.circle(resize);

                model.addRow(new Object[]{
                    new ImageIcon(resize),
                    errorLogModel.getName(),
                    errorLogModel.getEventDate(),
                    errorLogModel.getMessage(),
                    errorLogModel.getNameOfFile(),
                    errorLogModel.getClassName(),
                    errorLogModel.getMethodName(),
                    String.valueOf(errorLogModel.getLineNumber()),
                    errorLogModel.getAdditionalInfo()

                });

            } catch (Exception e) {
                e.printStackTrace();

            }
        }
        errorLogTable.setRowHeight(40);
    }
}
