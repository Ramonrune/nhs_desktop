/*
 * Direitos reservados a Ramon Lacava Gutierrez Gonçales
 * ramonrune@gmail.com
 */
package com.healthsystem.user;

import com.healthsystem.util.EmailManager;
import com.healthsystem.healthinstitution.*;
import com.healthsystem.user.nurse.NurseDAO;
import com.healthsystem.user.physician.PhysicianDAO;
import com.healthsystem.user.specialization.SpecializationInterfaceModel;
import com.healthsystem.user.specialization.SpecializationModel;
import com.healthsystem.util.dataprovider.CountryList;
import com.healthsystem.util.dataprovider.CountryModel;
import com.healthsystem.util.Criptography;
import com.healthsystem.util.DocumentValidator;
import com.healthsystem.util.ResizeUtil;
import com.healthsystem.util.ViewConfigurable;
import com.healthsystem.util.azure.AzureBlob;
import com.healthsystem.util.azure.ImageFilter;
import com.healthsystem.util.dataprovider.NurseTypeList;
import com.healthsystem.util.dataprovider.NurseTypeModel;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * @author Ramon Lacava Gutierrez Gonçales
 * @version 1.0.0
 * @date 30/06/2018 19:33:20
 */
public class UserAddWindow extends JDialog implements ViewConfigurable {

    private java.util.ResourceBundle i18n = java.util.ResourceBundle.getBundle("com/healthsystem/user/Bundle"); // NOI18N

    private JFileChooser fc;

    private UserPanel userPanel;

    /**
     * Cria um novo formulário HealthInstitutionAddWindow
     */
    public UserAddWindow() {

        setResizable(false);

        initComponents();
        setLocationRelativeTo(null);

        setTitle(i18n.getString("UserPanel.title"));

        countryComboBox.setModel(new DefaultComboBoxModel(CountryList.listOnlyCountries().toArray()));
        countryComboBox.setSelectedIndex(CountryList.index());

        ArrayList<String> list = new ArrayList<>();
        // if (UserSingleton.getInstance().isAdmin()) {
        list.add(i18n.getString("UserAddWindow.usetype1"));

        //}
        list.add(i18n.getString("UserAddWindow.usetype2"));
        list.add(i18n.getString("UserAddWindow.usetype3"));
        list.add(i18n.getString("UserAddWindow.usetype4"));

        userTypeComboBox.setModel(new DefaultComboBoxModel(list.toArray()));

        fc = new JFileChooser();
        fc.setFileFilter(new ImageFilter());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        List<String> genderList = new ArrayList<>();
        genderList.add(i18n.getString("UserAddWindow.gender.man"));
        genderList.add(i18n.getString("UserAddWindow.gender.woman"));
        genderList.add(i18n.getString("UserAddWindow.gender.other"));
        genderComboBox.setModel(new DefaultComboBoxModel(genderList.toArray()));

        dadosTab.removeTabAt(1);
        dadosTab.removeTabAt(1);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dadosTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        bornDateDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        countryComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        stateTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cityTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        neighborhoodTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        streetTextField = new javax.swing.JTextField();
        numberTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        userPhotoLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        postalCodeTextField = new javax.swing.JFormattedTextField();
        identityDocumentTextField = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        telephoneTextField = new javax.swing.JFormattedTextField();
        userTypeComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        passwordPasswordField = new javax.swing.JPasswordField();
        jLabel14 = new javax.swing.JLabel();
        confirmPasswordPasswordField = new javax.swing.JPasswordField();
        loginTextField = new javax.swing.JTextField();
        genderComboBox = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        physicianPanel = new javax.swing.JPanel();
        practiceDocumentLabel = new javax.swing.JLabel();
        jscrollPanelPhysician = new javax.swing.JScrollPane(specializationPanelPhysician);
        jLabel18 = new javax.swing.JLabel();
        practiceDocument = new javax.swing.JFormattedTextField();
        searchSpecializationsTextField = new javax.swing.JTextField();
        nursePanel = new javax.swing.JPanel();
        nurseRegisterLabel = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        nurseTypeComboBox = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        nurseRegisterTextField = new javax.swing.JFormattedTextField();
        jscrollPanelNurse = new javax.swing.JScrollPane(specializationPanelNurse);
        searchSpecializationsNurseTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        addUserButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        dadosTab.setBackground(new java.awt.Color(255, 255, 255));
        dadosTab.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        bornDateDatePicker.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        bornDateDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bornDateDatePickerActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/healthsystem/user/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("UserAddWindow.jLabel1.text")); // NOI18N

        nameTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        nameTextField.setMaximumSize(new java.awt.Dimension(6, 21));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText(bundle.getString("UserAddWindow.jLabel2.text")); // NOI18N

        countryComboBox.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        countryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText(bundle.getString("UserAddWindow.jLabel3.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText(bundle.getString("UserAddWindow.jLabel4.text")); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText(bundle.getString("UserAddWindow.jLabel5.text")); // NOI18N

        cityTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText(bundle.getString("UserAddWindow.jLabel6.text")); // NOI18N

        neighborhoodTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText(bundle.getString("UserAddWindow.jLabel7.text")); // NOI18N

        streetTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        numberTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText(bundle.getString("UserAddWindow.jLabel8.text")); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText(bundle.getString("UserAddWindow.jLabel9.text")); // NOI18N

        userPhotoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/user_128_128.png"))); // NOI18N
        userPhotoLabel.setMaximumSize(new java.awt.Dimension(150, 150));
        userPhotoLabel.setMinimumSize(new java.awt.Dimension(150, 150));
        userPhotoLabel.setPreferredSize(new java.awt.Dimension(150, 150));

        jButton1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton1.setText(bundle.getString("UserAddWindow.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        try {
            postalCodeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        postalCodeTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        postalCodeTextField.setMaximumSize(new java.awt.Dimension(6, 21));
        postalCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                postalCodeTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                postalCodeTextFieldKeyTyped(evt);
            }
        });

        try {
            identityDocumentTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        identityDocumentTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        identityDocumentTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identityDocumentTextFieldActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText(bundle.getString("UserAddWindow.jLabel10.text")); // NOI18N

        try {
            telephoneTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        telephoneTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        userTypeComboBox.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        userTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText(bundle.getString("UserAddWindow.jLabel11.text")); // NOI18N

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText(bundle.getString("UserAddWindow.jLabel12.text")); // NOI18N

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText(bundle.getString("UserAddWindow.jLabel13.text")); // NOI18N

        passwordPasswordField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        passwordPasswordField.setText(bundle.getString("UserAddWindow.passwordPasswordField.text")); // NOI18N
        passwordPasswordField.setMaximumSize(new java.awt.Dimension(6, 21));

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setText(bundle.getString("UserAddWindow.jLabel14.text")); // NOI18N

        confirmPasswordPasswordField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        confirmPasswordPasswordField.setText(bundle.getString("UserAddWindow.confirmPasswordPasswordField.text")); // NOI18N

        loginTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        loginTextField.setMaximumSize(new java.awt.Dimension(6, 21));

        genderComboBox.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        genderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderComboBoxActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText(bundle.getString("UserAddWindow.jLabel15.text")); // NOI18N

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText(bundle.getString("UserAddWindow.jLabel16.text")); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/search (5).png"))); // NOI18N
        jButton2.setText(bundle.getString("UserAddWindow.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(numberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(telephoneTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                                .addComponent(neighborhoodTextField))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(38, 38, 38)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(loginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(passwordPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(9, 9, 9)
                            .addComponent(userPhotoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(identityDocumentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(postalCodeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bornDateDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(userTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(confirmPasswordPasswordField)
                        .addComponent(countryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(stateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(streetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11))
                                .addGap(9, 9, 9)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(userTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(loginTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(passwordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(52, 52, 52))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(userPhotoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(identityDocumentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(postalCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confirmPasswordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(countryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(neighborhoodTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(streetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel15))
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(telephoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(14, 14, 14)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bornDateDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dadosTab.addTab(bundle.getString("UserAddWindow.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        physicianPanel.setBackground(new java.awt.Color(255, 255, 255));

        practiceDocumentLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        practiceDocumentLabel.setText(bundle.getString("UserAddWindow.practiceDocumentLabel.text")); // NOI18N

        jscrollPanelPhysician.setBackground(new java.awt.Color(255, 255, 255));
        jscrollPanelPhysician.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel18.setText(bundle.getString("UserAddWindow.jLabel18.text")); // NOI18N

        try {
            practiceDocument.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        practiceDocument.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        searchSpecializationsTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        searchSpecializationsTextField.setText(bundle.getString("UserAddWindow.searchSpecializationsTextField.text")); // NOI18N
        searchSpecializationsTextField.setToolTipText(bundle.getString("UserAddWindow.searchSpecializationsTextField.toolTipText")); // NOI18N
        searchSpecializationsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchSpecializationsTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchSpecializationsTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchSpecializationsTextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout physicianPanelLayout = new javax.swing.GroupLayout(physicianPanel);
        physicianPanel.setLayout(physicianPanelLayout);
        physicianPanelLayout.setHorizontalGroup(
            physicianPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, physicianPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(physicianPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchSpecializationsTextField)
                    .addComponent(jscrollPanelPhysician, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, physicianPanelLayout.createSequentialGroup()
                        .addGroup(physicianPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(practiceDocumentLabel)
                            .addComponent(practiceDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addGap(0, 414, Short.MAX_VALUE)))
                .addContainerGap())
        );
        physicianPanelLayout.setVerticalGroup(
            physicianPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(physicianPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(practiceDocumentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(practiceDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchSpecializationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jscrollPanelPhysician, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        dadosTab.addTab(bundle.getString("UserAddWindow.physicianPanel.TabConstraints.tabTitle"), physicianPanel); // NOI18N

        nursePanel.setBackground(new java.awt.Color(255, 255, 255));

        nurseRegisterLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        nurseRegisterLabel.setText(bundle.getString("UserAddWindow.nurseRegisterLabel.text")); // NOI18N

        jLabel19.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel19.setText(bundle.getString("UserAddWindow.jLabel19.text")); // NOI18N

        nurseTypeComboBox.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        nurseTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nurseTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel20.setText(bundle.getString("UserAddWindow.jLabel20.text")); // NOI18N

        try {
            nurseRegisterTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        nurseRegisterTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jscrollPanelNurse.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        searchSpecializationsNurseTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        searchSpecializationsNurseTextField.setText(bundle.getString("UserAddWindow.searchSpecializationsNurseTextField.text")); // NOI18N
        searchSpecializationsNurseTextField.setToolTipText(bundle.getString("UserAddWindow.searchSpecializationsNurseTextField.toolTipText")); // NOI18N
        searchSpecializationsNurseTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchSpecializationsNurseTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchSpecializationsNurseTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchSpecializationsNurseTextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout nursePanelLayout = new javax.swing.GroupLayout(nursePanel);
        nursePanel.setLayout(nursePanelLayout);
        nursePanelLayout.setHorizontalGroup(
            nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nursePanelLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nursePanelLayout.createSequentialGroup()
                        .addGroup(nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(searchSpecializationsNurseTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jscrollPanelNurse, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(nursePanelLayout.createSequentialGroup()
                                .addGroup(nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nurseRegisterLabel)
                                    .addComponent(nurseRegisterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                                .addGroup(nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(nurseTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(21, 21, 21))))
        );
        nursePanelLayout.setVerticalGroup(
            nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nursePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nurseRegisterLabel)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nurseTypeComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(nurseRegisterTextField))
                .addGap(18, 18, 18)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchSpecializationsNurseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jscrollPanelNurse, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        dadosTab.addTab(bundle.getString("UserAddWindow.nursePanel.TabConstraints.tabTitle"), nursePanel); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        addUserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/success.png"))); // NOI18N
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dadosTab)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(dadosTab, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void countryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryComboBoxActionPerformed

        String code = ((CountryModel) countryComboBox.getSelectedItem()).getCode();
        identityDocumentTextField.setText("");
        postalCodeTextField.setText("");
        telephoneTextField.setText("");
        nurseRegisterTextField.setText("");
        identityDocumentTextField.setFocusLostBehavior(JFormattedTextField.PERSIST);
        postalCodeTextField.setFocusLostBehavior(JFormattedTextField.PERSIST);
        telephoneTextField.setFocusLostBehavior(JFormattedTextField.PERSIST);
        nurseRegisterTextField.setFocusLostBehavior(JFormattedTextField.PERSIST);

        if (code.equals("BRA")) {
            try {
                postalCodeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
                identityDocumentTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
                telephoneTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
                nurseRegisterTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("######")));

            } catch (java.text.ParseException ex) {
                ex.printStackTrace();
            }
        } else if (code.equals("FS")) {
            try {

                postalCodeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####")));
                identityDocumentTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#############")));
                telephoneTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("## ### ####")));
                nurseRegisterTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########")));

            } catch (java.text.ParseException ex) {
                ex.printStackTrace();
            }
        } else {
            postalCodeTextField.setText("");
            identityDocumentTextField.setText("");
            telephoneTextField.setText("");
            nurseRegisterTextField.setText("");

            postalCodeTextField.setFormatterFactory(null);
            identityDocumentTextField.setFormatterFactory(null);
            telephoneTextField.setFormatterFactory(null);
            nurseRegisterTextField.setFormatterFactory(null);

        }

        if (userTypeComboBox.getSelectedItem() != null && userTypeComboBox.getSelectedItem().toString().charAt(0) == '2') {
            updatePhysician();

        }

        if (userTypeComboBox.getSelectedItem() != null && userTypeComboBox.getSelectedItem().toString().charAt(0) == '4') {
            updateNurse();

        }

    }//GEN-LAST:event_countryComboBoxActionPerformed

    private void postalCodeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_postalCodeTextFieldKeyTyped

    }//GEN-LAST:event_postalCodeTextFieldKeyTyped

    private void postalCodeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_postalCodeTextFieldKeyReleased
        String code = ((CountryModel) countryComboBox.getSelectedItem()).getCode();
        if (code.equals("BRA")) {

            String val = postalCodeTextField.getText().trim();

            System.out.println(val);
            if (val.length() == 9) {
                HealthInstitutionDAO.findAddress(val, stateTextField, streetTextField, neighborhoodTextField, cityTextField);
            }

        }
     }//GEN-LAST:event_postalCodeTextFieldKeyReleased

    private void identityDocumentTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_identityDocumentTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_identityDocumentTextFieldActionPerformed

    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed

        boolean success = true;

        if (success) {
            String login = loginTextField.getText();

            if (login.length() > 100) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.login"));
                success = false;
            }
        }

        if (success) {
            String login = loginTextField.getText();

            if (login.trim().equals("")) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.login.notnull"));
                success = false;
            }
        }

        if (success) {
            String login = loginTextField.getText();

            if (!EmailManager.isValidEmailAddress(login)) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.login.invalid"));
                success = false;
            }
        }

        if (selectedUser == null) {
            if (success) {
                String password = passwordPasswordField.getText();

                if (password.trim().equals("")) {
                    JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.password.notnull"));
                    success = false;
                }
            }

            if (success) {

                if (!passwordPasswordField.getText().equals(confirmPasswordPasswordField.getText())) {
                    JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.password.compare"));
                    success = false;
                }
            }
        }

        if (success) {
            if (nameTextField.getText().trim().equals("")) {

                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.name"));
                success = false;
            }

        }
        if (success) {
            String docIdentity = identityDocumentTextField.getText().replaceAll("\\D+", "");

            if (docIdentity.length() > 20) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.identityDocument"));
                success = false;
            }
        }

        if (success) {

            String docIdentity = identityDocumentTextField.getText().replaceAll("\\D+", "");

            String code = ((CountryModel) countryComboBox.getSelectedItem()).getCode();
            if (code.equals("BRA")) {

                if (!DocumentValidator.isCPF(docIdentity)) {
                    JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.identityDocument.invalid"));
                    success = false;
                }
            }

            if (code.equals("FS")) {
                if (docIdentity.trim().length() != 13) {
                    JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.identityDocument.invalid.fs"));
                    success = false;
                }
            }
        }

        if (success) {
            String postalCode = postalCodeTextField.getText().replaceAll("\\D+", "");

            if (postalCode.length() > 8) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.postalCode"));
                success = false;
            }
        }

        if (success) {
            String state = stateTextField.getText();

            if (state.length() > 100) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.state"));
                success = false;
            }
        }

        if (success) {
            String state = stateTextField.getText();

            if (state.trim().equals("")) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.state.notnull"));
                success = false;
            }
        }

        if (success) {
            String city = cityTextField.getText();

            if (city.length() > 100) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.city"));
                success = false;
            }
        }

        if (success) {
            String city = cityTextField.getText();

            if (city.trim().equals("")) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.city.notnull"));
                success = false;
            }
        }

        if (success) {
            String neighborhood = neighborhoodTextField.getText();

            if (neighborhood.length() > 50) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.neighborhood"));
                success = false;
            }
        }

        if (success) {
            String neighborhood = neighborhoodTextField.getText();

            if (neighborhood.trim().equals("")) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.neighborhood.notnull"));
                success = false;
            }
        }

        if (success) {
            String street = streetTextField.getText();

            if (street.length() > 100) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.street"));
                success = false;
            }
        }

        if (success) {
            String street = streetTextField.getText();

            if (street.trim().equals("")) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.street.notnull"));
                success = false;
            }
        }

        if (success) {
            String number = numberTextField.getText();

            if (number.length() > 10) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.number"));
                success = false;
            }
        }

        if (success) {
            String number = numberTextField.getText();

            if (number.trim().equals("")) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.number.notnull"));
                success = false;
            }
        }

        if (success) {
            String telephone = telephoneTextField.getText();

            if (telephone.length() > 20) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.telephone"));
                success = false;
            }
        }

        if (success) {
            Date date = bornDateDatePicker.getDate();

            if (date == null) {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.validate.borndate"));
                success = false;
            }
        }

        if (userTypeComboBox.getSelectedItem().toString().charAt(0) == '2') {
            if (success) {

                if (practiceDocument.getText().trim().equals("")) {
                    dadosTab.setSelectedIndex(1);

                    JOptionPane.showMessageDialog(null, practiceDocumentLabel.getText() + " " + i18n.getString("UserAddWindow.validate.practiceDocument.notnull"));
                    success = false;
                }

            }

        }

        if (userTypeComboBox.getSelectedItem().toString().charAt(0) == '4') {
            if (success) {

                if (nurseRegisterTextField.getText().trim().equals("")) {
                    dadosTab.setSelectedIndex(1);

                    JOptionPane.showMessageDialog(null, nurseRegisterLabel.getText() + " " + i18n.getString("UserAddWindow.validate.nurseRegister.notnull"));
                    success = false;
                }

            }

        }

        if (success) {
            String photo = UUID.randomUUID() + ".jpg";

            if (uploadImage == null) {
                photo = "USER_DEFAULT_PHOTO.jpg";
            }

            if (selectedUser != null) {
                if (!selectedUser.getPhoto().equals("USER_DEFAULT_PHOTO.jpg")) {
                    photo = selectedUser.getPhoto();
                } else if (uploadImage != null) {
                    photo = UUID.randomUUID() + ".jpg";
                } else {
                    photo = "USER_DEFAULT_PHOTO.jpg";

                }
            }

            String date = "";

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            date = sdf.format(bornDateDatePicker.getDate());
            StringBuilder id = new StringBuilder();

            boolean ok = false;

            if (!usedUpdate) {
                ok = userDAO.add(
                        nameTextField.getText(),
                        identityDocumentTextField.getText().replaceAll("\\D+", ""),
                        ((CountryModel) countryComboBox.getSelectedItem()).getCode(),
                        postalCodeTextField.getText().replaceAll("\\D+", ""),
                        stateTextField.getText(),
                        cityTextField.getText(),
                        neighborhoodTextField.getText(),
                        streetTextField.getText(),
                        numberTextField.getText(),
                        photo,
                        telephoneTextField.getText().replaceAll("\\D+", ""),
                        loginTextField.getText().toString(),
                        Criptography.sha256(passwordPasswordField.getText().toString()),
                        String.valueOf(userTypeComboBox.getSelectedItem().toString().charAt(0)),
                        String.valueOf(genderComboBox.getSelectedItem().toString().charAt(0)),
                        date,
                        id
                );

            } else if (selectedUser != null) {
                ok = userDAO.update(
                        loginTextField.getText().toString(),
                        "",
                        nameTextField.getText(),
                        identityDocumentTextField.getText().replaceAll("\\D+", ""),
                        ((CountryModel) countryComboBox.getSelectedItem()).getCode(),
                        postalCodeTextField.getText().replaceAll("\\D+", ""),
                        stateTextField.getText(),
                        cityTextField.getText(),
                        neighborhoodTextField.getText(),
                        streetTextField.getText(),
                        numberTextField.getText(),
                        photo,
                        telephoneTextField.getText().replaceAll("\\D+", ""),
                        String.valueOf(userTypeComboBox.getSelectedItem().toString().charAt(0)),
                        String.valueOf(genderComboBox.getSelectedItem().toString().charAt(0)),
                        date,
                        selectedUser.getId(),
                        false,
                        false,
                        !selectedUser.getIdentityDocument().equals(identityDocumentTextField.getText().replaceAll("\\D+", ""))
                );

                id.append(selectedUser.getId());

                if (ok) {
                    ok = userDAO.updateUserType(loginTextField.getText().toString(), String.valueOf(userTypeComboBox.getSelectedItem().toString().charAt(0)));

                }
            }

            if (ok) {
                ok = healthInstitutionDAO.addBind(HealthInstitutionSingleton.getInstance().getIdHealthInstitution(), id.toString(), usedUpdate ? "0" : "1");

            }

            if (userTypeComboBox.getSelectedItem().toString().charAt(0) == '2') {

                String idPhysician = UUID.randomUUID().toString();
                if (ok) {
                    ok = physicianDAO.add(id.toString(), idPhysician, practiceDocument.getText().trim());
                }

                if (ok) {

                    for (SpecializationInterfaceModel specializationInterfaceModel : specializationList) {
                        if (specializationInterfaceModel.getComboBox().isSelected()) {
                            boolean status = physicianDAO.bindSpecialization(idPhysician, specializationInterfaceModel.getId());
                            if (!status) {
                                ok = false;
                                break;
                            }
                        }

                    }

                }
            }

            if (userTypeComboBox.getSelectedItem().toString().charAt(0) == '4') {

                String idNurse = UUID.randomUUID().toString();
                if (ok) {
                    ok = nurseDAO.add(id.toString(), idNurse, nurseRegisterTextField.getText().trim(),
                            ((NurseTypeModel) nurseTypeComboBox.getSelectedItem()).getCode());
                }

                if (ok) {

                    for (SpecializationInterfaceModel specializationInterfaceModel : specializationList) {
                        if (specializationInterfaceModel.getComboBox().isSelected()) {
                            boolean status = nurseDAO.bindSpecialization(idNurse, specializationInterfaceModel.getId());
                            if (!status) {
                                ok = false;
                                break;
                            }
                        }

                    }

                }
            }

            if (ok) {

                if (uploadImage != null) {

                    if (!photo.equals("USER_DEFAULT_PHOTO.jpg")) {
                        AzureBlob.upload(uploadImage, photo, "userhealth");

                    }

                }

                if (userPanel != null) {
                    userPanel.populateData();
                }
                setVisible(false);
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.success"));

                dispose();

            }

        }

    }//GEN-LAST:event_addUserButtonActionPerformed

    private HealthInstitutionDAO healthInstitutionDAO = new HealthInstitutionDAO();
    private UserDAO userDAO = new UserDAO();
    private PhysicianDAO physicianDAO = new PhysicianDAO();


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                BufferedImage read = ImageIO.read(file);
                uploadImage = ResizeUtil.resize(read, 150, 150);
                ImageIcon icon = new ImageIcon(uploadImage);

                userPhotoLabel.setIcon(icon);
            } catch (IOException ex) {
                Logger.getLogger(UserAddWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void userTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTypeComboBoxActionPerformed

        for (int i = 1; i < dadosTab.getTabCount(); i++) {
            if (dadosTab.getTabCount() > 1) {
                dadosTab.removeTabAt(i);
            }

        }

        updatePhysician();

        updateNurse();


    }//GEN-LAST:event_userTypeComboBoxActionPerformed

    private void updatePhysician() {

        if (userTypeComboBox.getSelectedItem().toString().charAt(0) == '2') {

            System.out.println("physiciannnn");

            practiceDocument.setText("");
            practiceDocument.setFocusLostBehavior(JFormattedTextField.PERSIST);

            specializationPanelPhysician.removeAll();
            specializationList.clear();

            dadosTab.insertTab(i18n.getString("UserAddWindow.physicianPanel.TabConstraints.tabTitle"), null, physicianPanel, "", 1);

            List<SpecializationModel> listSpecialization = physicianDAO.listSpecialization(((CountryModel) countryComboBox.getSelectedItem()).getCode());
            jscrollPanelPhysician.getVerticalScrollBar().setUnitIncrement(16);

            for (SpecializationModel specializationModel : listSpecialization) {

                JCheckBox jCheckBox = new JCheckBox(specializationModel.getName());
                specializationPanelPhysician.add(jCheckBox);

                SpecializationInterfaceModel specializationInterfaceModel = new SpecializationInterfaceModel();
                specializationInterfaceModel.setComboBox(jCheckBox);
                specializationInterfaceModel.setId(specializationModel.getIdSpecialization());
                specializationInterfaceModel.setName(specializationInterfaceModel.getName());
                specializationList.add(specializationInterfaceModel);

            }
            specializationPanelPhysician.revalidate();
            specializationPanelPhysician.repaint();

        }

    }

    private NurseDAO nurseDAO = new NurseDAO();

    private void updateNurse() {

        if (userTypeComboBox.getSelectedItem().toString().charAt(0) == '4') {

            System.out.println("nurseee");
            nurseTypeComboBox.setModel(new DefaultComboBoxModel(NurseTypeList.getNurseTypes(((CountryModel) countryComboBox.getSelectedItem()).getCode()).toArray()));
            nurseTypeComboBox.setSelectedIndex(0);
            nurseRegisterTextField.setText("");
            nurseRegisterTextField.setFocusLostBehavior(JFormattedTextField.PERSIST);

            specializationPanelNurse.removeAll();
            specializationList.clear();

            dadosTab.insertTab(i18n.getString("UserAddWindow.nursePanel.TabConstraints.tabTitle"), null, nursePanel, "", 1);

            List<SpecializationModel> listSpecialization = nurseDAO.listSpecialization(((CountryModel) countryComboBox.getSelectedItem()).getCode());
            jscrollPanelNurse.getVerticalScrollBar().setUnitIncrement(16);

            for (SpecializationModel specializationModel : listSpecialization) {

                JCheckBox jCheckBox = new JCheckBox(specializationModel.getName());
                specializationPanelNurse.add(jCheckBox);

                SpecializationInterfaceModel specializationInterfaceModel = new SpecializationInterfaceModel();
                specializationInterfaceModel.setComboBox(jCheckBox);
                specializationInterfaceModel.setId(specializationModel.getIdSpecialization());
                specializationInterfaceModel.setName(specializationInterfaceModel.getName());
                specializationList.add(specializationInterfaceModel);

            }
            specializationPanelNurse.revalidate();
            specializationPanelNurse.repaint();

        }

    }

    private List<SpecializationInterfaceModel> specializationList = new ArrayList<>();

    private void genderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderComboBoxActionPerformed

    private void bornDateDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bornDateDatePickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bornDateDatePickerActionPerformed

    private boolean usedUpdate = false;

    private void nurseTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nurseTypeComboBoxActionPerformed

        if (((NurseTypeModel) nurseTypeComboBox.getSelectedItem()).getCode().equals("1")
                || ((NurseTypeModel) nurseTypeComboBox.getSelectedItem()).getCode().equals("6")) {
            for (SpecializationInterfaceModel specializationInterfaceModel : specializationList) {

                specializationInterfaceModel.getComboBox().setEnabled(true);

            }

        } else {
            for (SpecializationInterfaceModel specializationInterfaceModel : specializationList) {

                specializationInterfaceModel.getComboBox().setSelected(false);
                specializationInterfaceModel.getComboBox().setEnabled(false);

            }

        }

    }//GEN-LAST:event_nurseTypeComboBoxActionPerformed

    private UserModel selectedUser;

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        UserModel userByLogin = userDAO.getUserByLogin(loginTextField.getText());
        selectedUser = userByLogin;
        if (userByLogin != null) {
            if (userByLogin.getIdentityDocument().length() != 36) {

                if (userByLogin.getTypeOfUser().equals("0")) {
                    JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.accessDenied"));
                }
                if (userByLogin.getTypeOfUser().equals("1") || userByLogin.getTypeOfUser().equals("2") || userByLogin.getTypeOfUser().equals("3") || userByLogin.getTypeOfUser().equals("4")) {

                    List<HealthInstitutionModel> healthInstitutions = userDAO.getHealthInstitutions(selectedUser.getId(), "1");
                    boolean found = false;
                    for (HealthInstitutionModel healthInstitutionModel : healthInstitutions) {
                        if (healthInstitutionModel.getIdHealthInstitution().equals(HealthInstitutionSingleton.getInstance().getIdHealthInstitution())) {
                            JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.userAlreadyInThisInstitution"));
                            found = true;

                            break;
                        }
                    }
                    if (!found) {
                        int showConfirmDialog = JOptionPane.showConfirmDialog(null, i18n.getString("UserAddWindow.userAlreadyExist"));
                        if (JOptionPane.YES_OPTION == showConfirmDialog) {
                            boolean ok = healthInstitutionDAO.addBind(HealthInstitutionSingleton.getInstance().getIdHealthInstitution(), selectedUser.getId(), "0");

                            setVisible(false);
                            JOptionPane.showMessageDialog(null, i18n.getString("UserSendInviteWindow.success"));

                            dispose();
                        }
                    }

                }

                if (userByLogin.getTypeOfUser().equals("5")) {
                    loginTextField.setText(userByLogin.getLogin());
                    loginTextField.setEnabled(false);
                    passwordPasswordField.setText("");
                    confirmPasswordPasswordField.setText("");
                    passwordPasswordField.setEnabled(false);
                    confirmPasswordPasswordField.setEnabled(false);

                    usedUpdate = true;
                    nameTextField.setText(userByLogin.getName());

                    for (CountryModel country : CountryList.listOnlyCountries()) {
                        if (country.getCode().equals(userByLogin.getCountry())) {
                            countryComboBox.setSelectedItem(country);
                        }
                    }

                    identityDocumentTextField.setText(userByLogin.getIdentityDocument());
                    postalCodeTextField.setText(userByLogin.getPostalCode());
                    stateTextField.setText(userByLogin.getState());
                    cityTextField.setText(userByLogin.getCity());
                    neighborhoodTextField.setText(userByLogin.getNeighborhood());
                    streetTextField.setText(userByLogin.getStreet());
                    numberTextField.setText(userByLogin.getNumber());

                    telephoneTextField.setText(userByLogin.getTelephone());

                    if (userByLogin.getGender().equals("1")) {
                        genderComboBox.setSelectedIndex(0);
                    }

                    if (userByLogin.getGender().equals("2")) {
                        genderComboBox.setSelectedIndex(1);
                    }
                    if (userByLogin.getGender().equals("3")) {
                        genderComboBox.setSelectedIndex(2);
                    }

                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    try {
                        bornDateDatePicker.setDate(sdf.parse(userByLogin.getBornDate()));

                    } catch (ParseException ex) {
                    }

                    try {
                        URL url = new URL("https://healthsystem.blob.core.windows.net/userhealth/" + userByLogin.getPhoto() + "?" + String.valueOf(System.currentTimeMillis()));
                        userPhotoLabel.setIcon(new ImageIcon(url));

                    } catch (Exception ex) {
                        ex.printStackTrace();
                        try {
                            URL url = new URL("https://healthsystem.blob.core.windows.net/userhealth/USER_DEFAULT_PHOTO.jpg?" + String.valueOf(System.currentTimeMillis()));
                            URLConnection con = url.openConnection();
                            con.setUseCaches(false);

                            InputStream is = url.openStream();
                            userPhotoLabel.setIcon(new ImageIcon(ImageIO.read(is)));
                        } catch (Exception e) {
                            e.printStackTrace();

                        }

                    }
                }

            } else {
                JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.accessDenied"));

            }
        } else {
            JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.userNotFound"));
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void searchSpecializationsTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchSpecializationsTextFieldKeyReleased

        specializationPanelPhysician.removeAll();
        String physicianSpecialization = searchSpecializationsTextField.getText();
        for (SpecializationInterfaceModel specializationInterfaceModel : specializationList) {
            if (specializationInterfaceModel.getCheckbox().getText().toLowerCase().contains(physicianSpecialization.toLowerCase())) {
                specializationPanelPhysician.add(specializationInterfaceModel.getCheckbox());
            }
        }

        specializationPanelPhysician.repaint();
        specializationPanelPhysician.revalidate();
    }//GEN-LAST:event_searchSpecializationsTextFieldKeyReleased

    private void searchSpecializationsTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchSpecializationsTextFieldKeyPressed


    }//GEN-LAST:event_searchSpecializationsTextFieldKeyPressed

    private void searchSpecializationsTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchSpecializationsTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_searchSpecializationsTextFieldKeyTyped

    private void searchSpecializationsNurseTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchSpecializationsNurseTextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchSpecializationsNurseTextFieldKeyPressed

    private void searchSpecializationsNurseTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchSpecializationsNurseTextFieldKeyReleased
        specializationPanelNurse.removeAll();
        String nurseSpecialization = searchSpecializationsNurseTextField.getText();
        for (SpecializationInterfaceModel specializationInterfaceModel : specializationList) {
            if (specializationInterfaceModel.getCheckbox().getText().toLowerCase().contains(nurseSpecialization.toLowerCase())) {
                specializationPanelNurse.add(specializationInterfaceModel.getCheckbox());
            }
        }

        specializationPanelNurse.repaint();
        specializationPanelNurse.revalidate();
    }//GEN-LAST:event_searchSpecializationsNurseTextFieldKeyReleased

    private void searchSpecializationsNurseTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchSpecializationsNurseTextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_searchSpecializationsNurseTextFieldKeyTyped

    private JPanel specializationPanelPhysician = new JPanel(new GridLayout(0, 2));
    private JPanel specializationPanelNurse = new JPanel(new GridLayout(0, 2));

    public void setUserPanel(UserPanel userPanel) {
        this.userPanel = userPanel;
    }

    private BufferedImage uploadImage;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserAddWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserAddWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserAddWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserAddWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserAddWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUserButton;
    private org.jdesktop.swingx.JXDatePicker bornDateDatePicker;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JPasswordField confirmPasswordPasswordField;
    private javax.swing.JComboBox<String> countryComboBox;
    private javax.swing.JTabbedPane dadosTab;
    private javax.swing.JComboBox<String> genderComboBox;
    private javax.swing.JFormattedTextField identityDocumentTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jscrollPanelNurse;
    private javax.swing.JScrollPane jscrollPanelPhysician;
    private javax.swing.JTextField loginTextField;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField neighborhoodTextField;
    private javax.swing.JTextField numberTextField;
    private javax.swing.JPanel nursePanel;
    private javax.swing.JLabel nurseRegisterLabel;
    private javax.swing.JFormattedTextField nurseRegisterTextField;
    private javax.swing.JComboBox<String> nurseTypeComboBox;
    private javax.swing.JPasswordField passwordPasswordField;
    private javax.swing.JPanel physicianPanel;
    private javax.swing.JFormattedTextField postalCodeTextField;
    private javax.swing.JFormattedTextField practiceDocument;
    private javax.swing.JLabel practiceDocumentLabel;
    private javax.swing.JTextField searchSpecializationsNurseTextField;
    private javax.swing.JTextField searchSpecializationsTextField;
    private javax.swing.JTextField stateTextField;
    private javax.swing.JTextField streetTextField;
    private javax.swing.JFormattedTextField telephoneTextField;
    private javax.swing.JLabel userPhotoLabel;
    private javax.swing.JComboBox<String> userTypeComboBox;
    // End of variables declaration//GEN-END:variables

}
