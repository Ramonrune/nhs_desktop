/*
 * Direitos reservados a Ramon Lacava Gutierrez Gon√ßales
 * ramonrune@gmail.com
 */
package com.healthsystem.user;

import com.healthsystem.healthinstitution.*;
import com.healthsystem.util.ResizeUtil;
import com.healthsystem.util.WEBAPI;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class UserPanel extends javax.swing.JPanel {

    private java.util.ResourceBundle i18n = java.util.ResourceBundle.getBundle("com/healthsystem/user/Bundle");
    private HealthInstitutionDAO healthInstitutionDAO = new HealthInstitutionDAO();

    public UserPanel() {
        initComponents();

        populateData();

        userTable.removeColumn(userTable.getColumnModel().getColumn(0));
        userTable.setRowHeight(40);

        userTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {

                changeButtonState(true);
            }
        });

        userTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            protected void setValue(Object value) {
                if (value instanceof ImageIcon) {
                    setIcon((ImageIcon) value);
                    setText("");
                } else {
                    setIcon(null);
                    super.setValue(value);
                }
            }
        });

        if (!UserSingleton.getInstance().isAdmin()) {
            addAdminSystemAccountButton.setEnabled(false);
        }

        changeButtonState(false);

    }

    private void changeButtonState(boolean state) {
        deleteUserButton.setEnabled(state);
        editUserButton.setEnabled(state);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        addUserButton = new javax.swing.JButton();
        deleteUserButton = new javax.swing.JButton();
        editUserButton = new javax.swing.JButton();
        addAdminSystemAccountButton = new javax.swing.JButton();
        addUserButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(721, 506));
        setPreferredSize(new java.awt.Dimension(721, 506));

        searchTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/healthsystem/user/Bundle"); // NOI18N
        searchTextField.setToolTipText(bundle.getString("UserPanel.searchTextField.toolTipText")); // NOI18N
        searchTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyTyped(evt);
            }
        });

        userTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id user",
                i18n.getString("UserPanel.photo"),
                i18n.getString("UserPanel.name"),
                i18n.getString("UserPanel.document"),
                i18n.getString("UserPanel.typeofuser"),
                i18n.getString("UserPanel.state"),
                i18n.getString("UserPanel.city")
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(userTable);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText(bundle.getString("UserPanel.jLabel1.text")); // NOI18N

        addUserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        addUserButton.setToolTipText(bundle.getString("UserPanel.addUserButton.toolTipText")); // NOI18N
        addUserButton.setMinimumSize(new java.awt.Dimension(56, 20));
        addUserButton.setPreferredSize(new java.awt.Dimension(57, 33));
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        deleteUserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        deleteUserButton.setToolTipText(bundle.getString("UserPanel.deleteUserButton.toolTipText")); // NOI18N
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        editUserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view.png"))); // NOI18N
        editUserButton.setToolTipText(bundle.getString("UserPanel.editUserButton.toolTipText")); // NOI18N
        editUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUserButtonActionPerformed(evt);
            }
        });

        addAdminSystemAccountButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/key.png"))); // NOI18N
        addAdminSystemAccountButton.setMinimumSize(new java.awt.Dimension(56, 20));
        addAdminSystemAccountButton.setPreferredSize(new java.awt.Dimension(57, 33));
        addAdminSystemAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAdminSystemAccountButtonActionPerformed(evt);
            }
        });

        addUserButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/letter.png"))); // NOI18N
        addUserButton1.setToolTipText(bundle.getString("UserPanel.addUserButton1.toolTipText")); // NOI18N
        addUserButton1.setMinimumSize(new java.awt.Dimension(56, 20));
        addUserButton1.setPreferredSize(new java.awt.Dimension(57, 33));
        addUserButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText(bundle.getString("UserPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addAdminSystemAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addUserButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(deleteUserButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(addUserButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchTextField)
                    .addComponent(addAdminSystemAccountButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addUserButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed


    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed

    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void searchTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyTyped
        String text = searchTextField.getText().toLowerCase();
        List<UserModel> list = new ArrayList<>();

        for (UserModel model : users) {
            if (model.getTypeOfUser().toLowerCase().contains(text)) {
                list.add(model);
                continue;
            }
            if (model.getName().toLowerCase().contains(text)) {
                list.add(model);
                continue;
            }

            if (model.getIdentityDocument().toLowerCase().contains(text)) {
                list.add(model);
                continue;
            }
            if (model.getCity().toLowerCase().contains(text)) {
                list.add(model);
                continue;
            }

            if (model.getState().toLowerCase().contains(text)) {
                list.add(model);
                continue;
            }
        }
        for (int i = 0; i <= userTable.getRowCount(); i++) {
            ((DefaultTableModel) userTable.getModel()).setNumRows(0);
        }
        userTable.updateUI();

        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        for (UserModel userModel : list) {

            try {
                URL url = new URL(WEBAPI.IMAGE + "userhealth/" + userModel.getPhoto() + "?" + System.currentTimeMillis());
                BufferedImage buff = ImageIO.read(url);
                BufferedImage resize = ResizeUtil.resize(buff, 40, 40);
                resize = ResizeUtil.circle(resize);

                model.addRow(new Object[]{
                    userModel.getId(),
                    new javax.swing.ImageIcon(resize),
                    userModel.getName(),
                    userModel.getIdentityDocument(),
                    userModel.getTypeOfUser(),
                    userModel.getState(),
                    userModel.getCity()
                });
            } catch (Exception e) {

            }
        }

        changeButtonState(false);
    }//GEN-LAST:event_searchTextFieldKeyTyped

    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
        UserAddWindow userAddWindow = new UserAddWindow();
        userAddWindow.setUserPanel(this);
        userAddWindow.setVisible(true);
    }//GEN-LAST:event_addUserButtonActionPerformed

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        if (userTable.getRowCount() > 0) {
            if (userTable.getSelectedRowCount() > 0) {
                boolean success = true;

                int showConfirmDialog = JOptionPane.showConfirmDialog(null, i18n.getString("UserAddWindow.exclude.confirm"));
                if (showConfirmDialog == JOptionPane.YES_OPTION) {
                    int selectedRow[] = userTable.getSelectedRows();
                    for (int i : selectedRow) {
                        String id = userTable.getModel().getValueAt(i, 0).toString();
                        boolean ok = healthInstitutionDAO.deleteBind(HealthInstitutionSingleton.getInstance().getIdHealthInstitution(), id);
                        if (!ok) {
                            success = false;
                        } else {
                            model.removeRow(i);

                        }
                    }

                    if (success) {
                        JOptionPane.showMessageDialog(null, i18n.getString("UserAddWindow.exclude"));
                    }
                }

            }
        }
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private void editUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUserButtonActionPerformed

        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        if (userTable.getRowCount() > 0) {
            if (userTable.getSelectedRowCount() > 0) {
                boolean success = true;

                int selectedRow[] = userTable.getSelectedRows();
                for (int i : selectedRow) {
                    String id = userTable.getModel().getValueAt(i, 0).toString();

                    UserUpdateWindow userUpdateWindow = new UserUpdateWindow();
                    userUpdateWindow.setUser(userDAO.getUser(id), false);
                    userUpdateWindow.setUserPanel(this);
                    userUpdateWindow.setVisible(true);
                }
            }
        }

    }//GEN-LAST:event_editUserButtonActionPerformed

    private void addAdminSystemAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAdminSystemAccountButtonActionPerformed
        UserAddAdminHealthInstitutionSystemAccountWindow userAddAdminWindow = new UserAddAdminHealthInstitutionSystemAccountWindow();
        userAddAdminWindow.setUserPanel(this);
        userAddAdminWindow.setVisible(true);
    }//GEN-LAST:event_addAdminSystemAccountButtonActionPerformed

    private void addUserButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButton1ActionPerformed

        UserSendInviteWindow userSendInviteWindow = new UserSendInviteWindow();
        userSendInviteWindow.setVisible(true);
    }//GEN-LAST:event_addUserButton1ActionPerformed
    private List<UserModel> users;

    protected void populateData() {

        users = healthInstitutionDAO.getUsers(HealthInstitutionSingleton.getInstance().getIdHealthInstitution());
        for (int i = 0; i <= userTable.getRowCount(); i++) {
            ((DefaultTableModel) userTable.getModel()).setNumRows(0);
        }
        userTable.updateUI();

        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        for (UserModel userModel : users) {
            try {

                URL url = new URL(WEBAPI.IMAGE + "userhealth/" + userModel.getPhoto() + "?" + System.currentTimeMillis());
                BufferedImage buff = ImageIO.read(url);
                BufferedImage resize = ResizeUtil.resize(buff, 40, 40);
                resize = ResizeUtil.circle(resize);

                model.addRow(new Object[]{
                    userModel.getId(),
                    new ImageIcon(resize),
                    userModel.getName(),
                    userModel.getIdentityDocument(),
                    userModel.getTypeOfUser(),
                    userModel.getState(),
                    userModel.getCity()
                });
            } catch (Exception e) {
                e.printStackTrace();

            }
        }

        changeButtonState(false);

    }

    private UserDAO userDAO = new UserDAO();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAdminSystemAccountButton;
    private javax.swing.JButton addUserButton;
    private javax.swing.JButton addUserButton1;
    private javax.swing.JButton deleteUserButton;
    private javax.swing.JButton editUserButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
