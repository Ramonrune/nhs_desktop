/*
 * Direitos reservados a Ramon Lacava Gutierrez Gonçales
 * ramonrune@gmail.com
 */
package com.healthsystem.patient;

import com.google.common.io.Files;
import com.healthsystem.healthinstitution.*;
import com.healthsystem.user.UserSingleton;
import com.healthsystem.user.physician.PhysicianDAO;
import com.healthsystem.user.physician.PhysicianModel;
import com.healthsystem.user.specialization.SpecializationInterfaceModel;
import com.healthsystem.user.specialization.SpecializationModel;
import com.healthsystem.util.dataprovider.CountryList;
import com.healthsystem.util.dataprovider.CountryModel;
import com.healthsystem.util.DocumentValidator;
import com.healthsystem.util.ResizeUtil;
import com.healthsystem.util.ViewConfigurable;
import com.healthsystem.util.azure.AzureBlob;
import com.healthsystem.util.azure.ImageFilter;
import com.healthsystem.util.component.DrawPad;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * @author Ramon Lacava Gutierrez Gonçales
 * @version 1.0.0
 * @date 30/06/2018 19:33:20
 */
public class ExamManagerWindow extends JDialog implements ViewConfigurable {

    private java.util.ResourceBundle i18n = java.util.ResourceBundle.getBundle("com/healthsystem/patient/Bundle"); // NOI18N
    private JFileChooser fc;

    public ExamManagerWindow() {

        setResizable(false);

        initComponents();
        setLocationRelativeTo(null);

        fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(true);

        updateExamButton.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        examTextPane = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        signatureLabel = new javax.swing.JLabel();
        updateExamButton = new javax.swing.JButton();
        attachmentsLabel = new javax.swing.JLabel();
        attachmentScrollPanel = new javax.swing.JScrollPane(attachmentPanel);
        addAttachmentButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        physicianPhoto = new javax.swing.JLabel();
        physicianNameTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        medicalRegisterTextField = new javax.swing.JTextField();
        jscrollPanelPhysician = new javax.swing.JScrollPane(specializationPanelPhysician);
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        browser = new com.healthsystem.util.component.Browser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/healthsystem/patient/Bundle"); // NOI18N
        setTitle(bundle.getString("ExamManagerWindow.title")); // NOI18N
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        examTextPane.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        examTextPane.setEnabled(false);
        jScrollPane1.setViewportView(examTextPane);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText(bundle.getString("ExamManagerWindow.jLabel1.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText(bundle.getString("ExamManagerWindow.jLabel2.text")); // NOI18N

        signatureLabel.setText(bundle.getString("ExamManagerWindow.signatureLabel.text")); // NOI18N
        signatureLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        updateExamButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/success.png"))); // NOI18N
        updateExamButton.setText(bundle.getString("ExamManagerWindow.updateExamButton.text")); // NOI18N
        updateExamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateExamButtonActionPerformed(evt);
            }
        });

        attachmentsLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        attachmentsLabel.setText(bundle.getString("ExamManagerWindow.attachmentsLabel.text")); // NOI18N

        addAttachmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attachment.png"))); // NOI18N
        addAttachmentButton.setText(bundle.getString("ExamManagerWindow.addAttachmentButton.text")); // NOI18N
        addAttachmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAttachmentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(signatureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(attachmentsLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addAttachmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(attachmentScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(594, Short.MAX_VALUE)
                .addComponent(updateExamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addAttachmentButton)
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(attachmentsLabel)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attachmentScrollPanel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signatureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateExamButton)
                .addGap(30, 30, 30))
        );

        jTabbedPane1.addTab(bundle.getString("ExamManagerWindow.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        physicianPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/user_128_128.png"))); // NOI18N
        physicianPhoto.setText(bundle.getString("ExamManagerWindow.physicianPhoto.text")); // NOI18N

        physicianNameTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        physicianNameTextField.setText(bundle.getString("ExamManagerWindow.physicianNameTextField.text")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText(bundle.getString("ExamManagerWindow.jLabel4.text")); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText(bundle.getString("ExamManagerWindow.jLabel5.text")); // NOI18N

        medicalRegisterTextField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        medicalRegisterTextField.setText(bundle.getString("ExamManagerWindow.medicalRegisterTextField.text")); // NOI18N

        jscrollPanelPhysician.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText(bundle.getString("ExamManagerWindow.jLabel6.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jscrollPanelPhysician)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(physicianPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(0, 417, Short.MAX_VALUE))
                            .addComponent(medicalRegisterTextField)
                            .addComponent(physicianNameTextField)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(physicianPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(physicianNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(medicalRegisterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(8, 8, 8)
                .addComponent(jscrollPanelPhysician, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("ExamManagerWindow.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(browser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(browser, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(bundle.getString("ExamManagerWindow.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateExamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateExamButtonActionPerformed
        boolean success = true;

        if (examTextPane.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, i18n.getString("ExamAddWindow.validate.description"));
            success = false;
        }

        if (success) {

            boolean ok = patientDAO.updateExam(examModel.getIdExam(), examTextPane.getText());
            if (ok) {

                if (ok) {
                    for (File file : uploadList) {

                        String idAttachment = UUID.randomUUID().toString();
                        boolean result = patientDAO.addExamAttachment(idAttachment, file.getName(), examModel.getIdExam());
                        if (!result) {
                            ok = false;
                            break;
                        }
                        AzureBlob.upload(file, idAttachment + "." + Files.getFileExtension(file.getAbsolutePath()), "exam-attachments");

                    }

                    if (ok) {
                        patientPanel.chargeExams();
                        setVisible(false);
                        JOptionPane.showMessageDialog(null, i18n.getString("ExamManagerWindow.success"));
                        dispose();
                    }

                }

            }
        }

    }//GEN-LAST:event_updateExamButtonActionPerformed
    private int size = 0;
    private void addAttachmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAttachmentButtonActionPerformed

        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (size < 5) {
                File[] files = fc.getSelectedFiles();
                int len = 0;
                boolean dontAttach = false;
                for (File file : files) {
                    if (len == 5) {
                        JOptionPane.showMessageDialog(null, i18n.getString("ExamAddWindow.message.filelimit"));
                        break;
                    }

                    // Get length of file in bytes
                    long fileSizeInBytes = file.length();
// Convert the bytes to Kilobytes (1 KB = 1024 Bytes)
                    long fileSizeInKB = fileSizeInBytes / 1024;
// Convert the KB to MegaBytes (1 MB = 1024 KBytes)
                    long fileSizeInMB = fileSizeInKB / 1024;

                    if (fileSizeInMB > 20) {
                        dontAttach = true;
                        continue;
                    }

                    attachmentScrollPanel.getVerticalScrollBar().setUnitIncrement(16);
                    JPanel jpanel = new JPanel(new GridBagLayout());
                    jpanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

                    JButton chooseAttachmentButton = new JButton(file.getName());
                    chooseAttachmentButton.setPreferredSize(new Dimension(200, 40));
                    GridBagConstraints c = new GridBagConstraints();
                    c.gridx = 0;
                    c.gridy = 0;
                    c.weightx = 1;

                    jpanel.add(chooseAttachmentButton, c);

                    JButton deleteAttachmentButton = new JButton();

                    deleteAttachmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N

                    deleteAttachmentButton.addMouseListener(new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            attachmentPanel.remove(jpanel);
                            attachmentPanel.revalidate();
                            attachmentPanel.repaint();
                            uploadList.remove(file);
                            size--;
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {

                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {

                        }

                        @Override
                        public void mouseEntered(MouseEvent e) {
                        }

                        @Override
                        public void mouseExited(MouseEvent e) {

                        }
                    });

                    c = new GridBagConstraints();
                    c.gridx = 1;
                    c.gridy = 0;
                    c.weightx = 1;
                    jpanel.add(deleteAttachmentButton, c);

                    attachmentPanel.add(jpanel);
                    attachmentPanel.revalidate();
                    attachmentPanel.repaint();

                    uploadList.add(file);
                    len++;
                    size++;

                }

                if (dontAttach) {
                    JOptionPane.showMessageDialog(null, i18n.getString("ExamAddWindow.message.fileSizeLimit"));

                }
            } else {
                JOptionPane.showMessageDialog(null, i18n.getString("ExamAddWindow.message.filelimit"));

            }
        }
    }//GEN-LAST:event_addAttachmentButtonActionPerformed

    private List<File> uploadList = new ArrayList<>();
    private JPanel attachmentPanel = new JPanel();
    private PatientDAO patientDAO = new PatientDAO();
    private PhysicianDAO physicianDAO = new PhysicianDAO();
    private JPanel specializationPanelPhysician = new JPanel(new GridLayout(0, 2));

    private ExamModel examModel;

    public void setExamModel(ExamModel examModel) {
        this.examModel = examModel;

        examTextPane.setText(examModel.getAnotation());
        try {

            BufferedImage img = AzureBlob.download(examModel.getIdExam() + ".jpg", "exam");
            if (img != null) {
                signatureLabel.setIcon(new ImageIcon(img));

            }
        } catch (Exception ex) {

        }

        physicianNameTextField.setText(examModel.getPhysicianName());
        physicianNameTextField.setEnabled(false);

        medicalRegisterTextField.setText(examModel.getPhysicianPracticeNumber());
        medicalRegisterTextField.setEnabled(false);

        try {
            URL url = new URL("https://healthsystem.blob.core.windows.net/userhealth/" + examModel.getPhysicianPhoto() + "?" + String.valueOf(System.currentTimeMillis()));
            physicianPhoto.setIcon(new ImageIcon(url));

        } catch (Exception ex) {
            ex.printStackTrace();
            try {
                URL url = new URL("https://healthsystem.blob.core.windows.net/userhealth/USER_DEFAULT_PHOTO.jpg?" + String.valueOf(System.currentTimeMillis()));
                URLConnection con = url.openConnection();
                con.setUseCaches(false);

                InputStream is = url.openStream();
                physicianPhoto.setIcon(new ImageIcon(ImageIO.read(is)));

            } catch (Exception e) {
                e.printStackTrace();

            }

        }

        jscrollPanelPhysician.getVerticalScrollBar().setUnitIncrement(16);

        List<SpecializationModel> listSpecialization = physicianDAO.listSpecialization(examModel.getPhysicianCountry());
        List<SpecializationModel> listPhysicianSpecialization = physicianDAO.listPhysicianSpecialization(examModel.getIdPhysician());

        for (SpecializationModel specializationModel : listSpecialization) {

            JCheckBox jCheckBox = new JCheckBox(specializationModel.getName());

            if (listPhysicianSpecialization.contains(specializationModel)) {
                jCheckBox.setSelected(true);
                jCheckBox.setEnabled(false);

                specializationPanelPhysician.add(jCheckBox);
            }

        }
        specializationPanelPhysician.revalidate();
        specializationPanelPhysician.repaint();

        browser.run(String.valueOf(examModel.getHealthInstitutionLatitute()), String.valueOf(examModel.getHealthInstitutionLongitute()));

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAttachmentButton;
    private javax.swing.JScrollPane attachmentScrollPanel;
    private javax.swing.JLabel attachmentsLabel;
    private com.healthsystem.util.component.Browser browser;
    private javax.swing.JEditorPane examTextPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane jscrollPanelPhysician;
    private javax.swing.JTextField medicalRegisterTextField;
    private javax.swing.JTextField physicianNameTextField;
    private javax.swing.JLabel physicianPhoto;
    private javax.swing.JLabel signatureLabel;
    private javax.swing.JButton updateExamButton;
    // End of variables declaration//GEN-END:variables

    private PhysicianModel physicianModel;

    public void setPhysicianModel(PhysicianModel physicianModel) {
        this.physicianModel = physicianModel;

        if (!physicianModel.getIdPhysician().equals(examModel.getIdPhysician())) {
            updateExamButton.setEnabled(false);
            examTextPane.setEnabled(false);
            addAttachmentButton.setEnabled(false);
        }

        chargeAttachments();

    }

    private PatientPanel patientPanel;

    public void setPatientPanel(PatientPanel patientPanel) {
        this.patientPanel = patientPanel;
    }

    private JFileChooser directoryChooser;
    private List<ExamAttachmentModel> examAttachments;

    private void chargeAttachments() {

        examAttachments = patientDAO.getExamAttachments(examModel.getIdExam());
        attachmentPanel.setLayout(new BoxLayout(attachmentPanel, BoxLayout.PAGE_AXIS));

        attachmentScrollPanel.getVerticalScrollBar().setUnitIncrement(16);

        for (ExamAttachmentModel examAttachmentModel : examAttachments) {

            JPanel jpanel = new JPanel(new GridBagLayout());
            jpanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

            JButton chooseAttachmentButton = new JButton(examAttachmentModel.getAttachmentName());
            chooseAttachmentButton.setPreferredSize(new Dimension(200, 40));
            chooseAttachmentButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    directoryChooser = new JFileChooser();
                    directoryChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                    directoryChooser.setSelectedFile(new File(examAttachmentModel.getAttachmentName()));
                    String extension = "." + Files.getFileExtension(examAttachmentModel.getAttachmentName());
                    int returnVal = directoryChooser.showSaveDialog(null);

                    if (returnVal == 0) {
                        byte[] bytes = AzureBlob.downloadInputStream(examAttachmentModel.getIdExamAttachment() + extension, "exam-attachments");
                        
                        try {
                            FileOutputStream newFile = new FileOutputStream(directoryChooser.getSelectedFile().getAbsoluteFile());
                            newFile.write(bytes);
                            newFile.close();
                        } catch (Exception ex) {

                        }
                    }

                }
            });

            GridBagConstraints c = new GridBagConstraints();
            c.gridx = 0;
            c.gridy = 0;
            c.weightx = 1;

            jpanel.add(chooseAttachmentButton, c);

            JButton deleteAttachmentButton = new JButton();

            deleteAttachmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
            deleteAttachmentButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {

                    int showConfirmDialog = JOptionPane.showConfirmDialog(null, i18n.getString("ExamManagerWindow.messageConfirmExclude"));
                    if (showConfirmDialog == JOptionPane.YES_OPTION) {
                        boolean deleteExamAttachment = patientDAO.deleteExamAttachment(examAttachmentModel.getIdExamAttachment());
                        if (deleteExamAttachment) {
                            String extension = "." + Files.getFileExtension(examAttachmentModel.getAttachmentName());

                            AzureBlob.delete(examAttachmentModel.getIdExamAttachment() + extension, "exam-attachments");
                            attachmentPanel.remove(jpanel);
                            attachmentPanel.revalidate();
                            attachmentPanel.repaint();
                            size--;

                            JOptionPane.showMessageDialog(null, i18n.getString("ExamManagerWindow.successAttachmentExclusion"));
                        }

                    }

                }
            }
            );
            if (!physicianModel.getIdPhysician()
                    .equals(examModel.getIdPhysician())) {
                deleteAttachmentButton.setEnabled(false);
            }

            c = new GridBagConstraints();
            c.gridx = 1;
            c.gridy = 0;
            c.weightx = 1;

            jpanel.add(deleteAttachmentButton, c);

            attachmentPanel.add(jpanel);

            attachmentPanel.revalidate();

            attachmentPanel.repaint();

            size++;

        }
    }

}
